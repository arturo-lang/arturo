;========================================================
; Arturo
; Programming Language + Bytecode VM compiler
; (c) 2019-2025 Yanis ZafirÃ³pulos
;
; @file: system/console.art
;========================================================

; initialize environment

completions: map sort keys symbols => [& ++ " "]
hints: #[]

loop symbols [k,v][
    if function? var k [
        att: get info.get k 'attrs
        ats: keys att

        if not? empty? ats [
            'completions ++ map ats 'at [
                (:logical = first att\[at]\types)?  -> join @[k "." at " "]
                                                    -> join @[k "." at ": "]
            ]
        ]
    ]
]

loop symbols [k,v][
    if function? var k [
        hints\[k]: join.with:" " keys get info.get k 'args
    ]
]

historyPath: join.path @[path\home ".arturo" "history.lst"]

; set all packager-related operations as verbose
if sys\release = 'full [
    __VerbosePackager
]

; helpers & templates

LongHeader: {
    |color #green.bold "Arturo"|  
    |sys\copyright| |sys\author|
}

vv: to :string sys\version
[versionPart,buildPart]: split.by:"+" to :string sys\version

Details: {# version : |versionPart|} ++ "\n"

if or? [contains? buildPart "."][3 < to :integer buildPart][
    Details: Details ++ {# build   : |buildPart| @ |sys\built|} ++ "\n"
]

Details: Details ++ {# arch    : |sys\cpu\arch|/|sys\os|}

BR: "\n"

orange: $[x][
    color #orange x
]

orangeBold: $[x][
    color #orange.bold x
]

PrintFList: function [sorted, ftype][
    llength: 80

    print repeat "-" llength
    print pad.center ((positive? size sorted)? -> to :string size sorted -> "No") ++ 
          " built-in function" ++ 
          ((1 = size sorted)? -> " " -> "s ") ++
          ftype llength
    print repeat "-" llength

    loop sorted 'key [
        v: symbols\[key]
        fparams: "(" ++ (join.with:"," to [:string] keys get info.get key 'args) ++ ")"
        finfo: get info.get key 'description
        finfo: replace finfo {/\[[^\]]+\] /} ""

        print (color.bold #magenta pad.right key 17) ++
              (pad.right fparams 30) ++
              " -> " ++
              finfo

    ]
]

; print header

clear
print join @[
    ~LongHeader BR BR
    color #gray ~Details BR BR
    orange "# Type " 
    orangeBold "help"
    orange " to get a list of all available functions with a short description" BR 
    orange "# Type "
    orangeBold {lookup "something"} 
    orange " to lookup a specific function by name/description or type" BR 
    orange "# Type " 
    orangeBold "info 'symbol"
    orange " for info about a specific symbol or built-in function" BR BR
    orange "# For multi-line input, just add a blank space at the end of a line" BR
    orange "# Use TAB for auto-completion, UP for navigating history" BR BR
    orange "# Launching interactive console - rock on! ðŸ¤˜" BR
]

; terminal-only methods

help: function [][
    ;; description: Â« print a list of all available built-in functions
    ;; returns: :nothing

    results: select sort keys symbols 'sym ->
        function?.builtin var sym

    PrintFList results "available"
]

lookup: function [what :string :literal :regex :type][
    ;; description: Â« lookup functions by given descriptive string or signature types
    ;; options: [
    ;;      returns: Â« check by return type
    ;; ]
    ;; returns: :nothing

    results: new []

    (type? what)? [
        results: select sort keys symbols 'sym ->
            function?.builtin var sym

        (null? attr "returns")? [
            results: select results 'sym ->
                contains? flatten values get info.get sym 'args what
        ] [
            results: select results 'sym ->
                contains? flatten get info.get sym 'returns what
        ]
    ] [ ; not? type? what
        results: (select sort keys symbols 'sym ->
            function? var sym) -- ["orange" "orangeBold" "PrintFList"]

        results: select results 'sym [
            finfo: get info.get sym 'description
            fparams: keys get info.get sym 'args
            fattrs: keys get info.get sym 'attrs

            inFparams: false
            loop fparams 'fparam [
                if contains? fparam what ->
                    inFparams: true
            ]

            inFattrs: false
            loop fattrs 'fattr [
                if contains? fattr what ->
                    inFattrs: true

                if contains? get get get info.get sym 'attrs fattr 'description what ->
                    inFattrs: true
            ]

            any? @[
                contains? sym what
                contains? finfo what
                inFparams
                inFattrs
            ]
        ]
    ]

    PrintFList results "found"
    discard unstack size stack
]

Repl: #[autocomplete?: true, hints?: true, verbose?: true]

; start the REPL

while [true] [
    ;push null
    Got: null

    indentation: ""
    
    command: [input.repl .history: historyPath]
    if Repl\autocomplete? -> append 'command [.complete: completions]
    if Repl\hints? -> append 'command [.hint: hints]
    append 'command ["$> "]

    inp: do command

    while [suffix? inp " "][
        if suffix? strip inp "[" [
            indentation: indentation ++ "\t"
        ]
        inp: inp ++ "\n" ++ input ".. " ++ indentation
    ]

    err: try.verbose [
        err: try.verbose to :block inp

        StackSize: size stack

        if Repl\verbose? [
            if StackSize > 0 -> Got: unstack 1
            unless null? Got -> print color #gray render.once "=> |Got|"
        ]

        print ""
    ]
]
