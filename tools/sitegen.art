#!/usr/bin/env arturo

;---------------------------------------------------------------------------------
; How this works:
;---------------------------------------------------------------------------------
; - Before anything, build Arturo for docgen (to have the necessary line data):
;       ./build.nims build docgen 
; - First, run this script - to generate all necessary data & templates
; - Then, go to docs/website
; - Finally, run: webize --build --at: ../../../arturo-lang.io/
; - And upload all website files to server
;
; * Don't forget to push changes to the corresponding repo!
;---------------------------------------------------------------------------------

;import'progressive!

modules: new []
functions: #[]
relatedFuncs: #[]

rosettas: sort map select list "examples/rosetta" => [contains? & ".res"] 'rosetta [
    (extract.basename rosetta) -- extract.extension rosetta
]

dict: new []

loop rosettas 'ro [
    'dict ++ ro
]

loop list "docs/website/data" 'df [
    if ".art" = extract.extension df -> 
        delete df
]

(as.pretty.code dict) >> "docs/website/data/rosetta.art" 

; get modules and functions
loop keys symbols [sym][
    ;processing sym

    inf: info.get sym

    if key? inf 'module [
        fun: inf\name
        lib: inf\module
        if "macros" = lower lib ->
            lib: "Quantities"

        append 'modules lib
        if not? key? functions lib [
            functions\[lib]: []
        ]
        functions\[lib]: append functions\[lib] fun

        levD: 100
        related: new #[]
        loop keys symbols [sym2][
            inf2: info.get sym2

            if and? key? inf2 'module
                    inf <> inf2 [
                lib2: inf2\module
                score: 0.0
                if lib=lib2 [
                    score: score + 0.8
                ]
                if and? contains? sym "?" contains? sym2 "?" [
                    score: score + 0.5
                ]
                if and? not? contains? sym "?" not? contains? sym2 "?" [
                    score: score + 0.5
                ]
                score: score + jaro sym sym2
                score: score + 4 * jaro inf\description inf2\description

                related\[new ~"|capitalize lib2|/|sym2|"]: score
            ]
        ]
        bestMatches: reverse last.n: 4 keys sort.values related
        relatedFuncs\[sym]: bestMatches
    ]
]

unique 'modules

loop functions [modl,lst][
    ;processing modl
    target: relative join.path @["../docs/website/pages/documentation/library" lower modl]

    loop list target 'tt [
        if "_index.art" <> extract.basename tt ->
            delete tt
    ]

    loop lst 'func [
        funcInfo:  info.get func
        switch funcInfo\type = :function [
            attributes: funcInfo\attrs
            arguments: funcInfo\args
            funcInfo: remove.key funcInfo 'attrs
            funcInfo: remove.key funcInfo 'args
            examples: funcInfo\example
            funcInfo: remove.key funcInfo 'example
            funcInfo\examples: examples
            funcInfo\attributes: attributes
            funcInfo\arguments: arguments
        ][
            funcInfo\returns: @[funcInfo\type]
        ]
        funcInfo: remove.key funcInfo 'address
        funcInfo\related: relatedFuncs\[func]
        funcInfo: replace strip as.pretty.code.unwrapped funcInfo "\t" "    "

        if not? exists? target ->
            write.directory Ã¸ target
        funcInfo >> join.path @[target ~{|replace func "?" "-"|.art}]
    ]
]
funcs: new []
loop functions [modl,lst][
    loop lst 'f [
        'funcs ++ f
    ]
]

sort 'funcs
funcList: new []
symbList: new []

loop funcs 'f [
    ;processing f
    inf: info.get f 

    href: lower replace ~"|inf\module|/|f|" "?" "-"
    'funcList ++ f
    'funcList ++ href

    if key? inf 'alias [
        'symbList ++ to :string inf\alias
        'symbList ++ to :string inf\name
        'symbList ++ href
    ]
]

(as.pretty.code sort unique modules) >> "docs/website/data/libraryModules.art" 
(as.pretty.code funcList) >> "docs/website/data/libraryFunctions.art" 
(as.pretty.code symbList) >> "docs/website/data/librarySymbols.art" 
