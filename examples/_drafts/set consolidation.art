consolidate: function [sets][
    sorted: []
    loop sets 's ->
        'sorted ++ sort s
        ; foreach (set; sets)
        ; set.sort();

    loop 0..(size sorted)-2 'i [
        print ["i:" i]
        si: sorted\[i]
        if empty? si -> continue
        loop.with:j sorted\[(i+1)..dec size sorted] 'sj [
            ssj: @[sj]
            if and? not? empty? ssj intersect? si ssj [
                sorted\[j]: unique union si ssj
                sorted\[si]: Ã¸
            ]
        ]
    ]

    return sorted
    ; foreach (i, ref si; sets[0 .. $ - 1]) {
    ;     if (si.empty)
    ;         continue;
    ;     foreach (ref sj; sets[i + 1 .. $])
    ;         if (!sj.empty && !si.setIntersection(sj).empty) {
    ;             sj = si.setUnion(sj).uniq.array;
    ;             si = null;
    ;         }
    ; }

    ; return sets.filter!"!a.empty".array;
    ; if 2 > size sets -> return sets
    ; r: sets\0
    ; b: consolidate drop sets 1

    ; loop b 'x [
    ;     if intersect? @[r\0] @[x] [
    ;         r\0: union @[r\0] @[x]
    ;     ][
    ;         'r ++ x
    ;     ]
    ; ]
    ; return r
;     var (r, b) = (@[sets[0]], consolidate(sets[1..^1]))
;   for x in b:
;     if len(r[0] * x) != 0:
;       r[0] = r[0] + x
;     else:
;       r.add(x)
;   r
]

; def conso(s):
; 	if len(s) < 2: return s
 
; 	r, b = [s[0]], conso(s[1:])
; 	for x in b:
; 		if r[0].intersection(x): r[0].update(x)
; 		else: r.append(x)
; 	return r

print consolidate [['A 'B] ['C 'D]]
print consolidate [['A 'B] ['B 'D]]
print consolidate [['A 'B] ['C 'D] ['D 'B]]
print consolidate [['H 'I 'K] ['A 'B] ['C 'D] ['D 'B] ['F 'G 'H]]