kolakoski: function [a, length][
    result: array.of: length 0
    i: 0
    k: 0

    loop.forever a 'x [
        result\[i]: x
        if result\[k] > 1 [
            loop 1..dec result\[k] 'j [
                inc 'i
                if i = length -> return result
                result\[i]: result\[i-1]
            ]
        ]
        inc 'i
        if i = length -> return result
        inc 'k
    ]
    return result
]

possibleKolakoski?: function [seq][
    prev: seq\0
    count: 1
    rle: []

    loop 1..dec size seq 'i [
        switch seq\[i] = prev -> inc 'count
        [
            'rle ++ count
            count: 1
            prev: seq\[i]
        ]
    ]

    loop.with:'i rle 'val [
        if val <> seq\[i] -> return false
    ]
    return true
]

Seqs: [[1 2] [2 1] [1 3 1 2] [1 3 2 1]]
Lens: [20 20 30 30]

loop couple Seqs Lens 'c [
    generated: kolakoski c\0 c\1
    print ["First" c\1 "members of the sequence generated by" c\0 ":"]
    print generated
    print ["Possible Kolakoski sequence?" possibleKolakoski? generated]
    print ""
]