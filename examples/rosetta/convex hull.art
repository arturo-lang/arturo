define :point [x, y]

orientation: function [P Q R][
    val: sub (Q\y - P\y)*(R\x - Q\x) (Q\x - P\x)*(R\y - Q\y)
    if val=0 -> return 0
    if val>0 -> return 1
    return 2
]

calculateConvexHull: function [points][
    result: []

    if 3 > size points [
        loop points 'p -> 'result ++ p
    ]

    indexMinX: 0
    loop.with:'i points 'p [
        if p\x < get points\[indexMinX] 'x ->
            indexMinX: i
    ]

    p: indexMinX
    q: 0

    while [true][
        'result ++ points\[p]

        q: (p + 1) % size points

        loop 0..dec size points 'i [
            if 2 = orientation points\[p] points\[i] points\[q] ->
                q: i
        ]

        p: q

        if p=indexMinX -> break
    ]

    return result
]
 
points: to [:point] @[
    [16 3],
    [12 17],
    [0 6],
    @[neg 4 neg 6],
    [16 6],
    @[16 neg 7],
    @[17 neg 4],
    [5 19],
    @[19 neg 8],
    [3 16],
    [12 13],
    @[3 neg 4],
    [17 5],
    @[neg 3 15],
    @[neg 3 neg 9],
    [0 11],
    @[neg 9 neg 3],
    @[neg 4 neg 2],
    [12 10]
]

hull: calculateConvexHull points
loop hull 'i ->
    print i