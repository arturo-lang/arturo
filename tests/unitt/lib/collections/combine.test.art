import {unitt}!
import relative {../../commons/functions}!


kCombinations: $[n k] -> 
    div (factorial n) 
        ((factorial k) * (factorial (n - k)))

kMulticombination: $[n k] ->
    kCombinations (dec n + k) (k)


suite "General Tests" [

    someBlock: [A B C]

    test.prop "all combinations of given collection is itself inside a block" [
        assert -> equal? @[someBlock] combine someBlock
    ]

    test.prop "all repeated combinations of an unitary collection" 
    ++ "is itself wrapped into a block" [
        assert -> equal? [[A]] combine.repeated [A]
    ]

    test.prop "combine.by: k returns inner values of k size" [
        k: 2
        assert -> every? combine.by: k someBlock 'el -> k = size el
        assert -> every? combine.repeated.by: k someBlock 'el -> k = size el
    ]
    
    test.prop "combine A is a shortcut for combine.by: (size A) A" [
        n: 2
        assert -> equal? 
            combine someBlock 
            combine.by: (size someBlock) someBlock
        assert -> equal? 
            combine.repeated someBlock 
            combine.repeated.by: (size someBlock) someBlock
    ]

    test.prop ".count is the size of the combination" [
        operations: [[combine.by: 2] [combine.repeated] [combine.repeated.by: 2]
                     [combine.by:0] [combine.repeated.by: 0]]
        loop operations 'op [
            counted: (op ++ [.count someBlock])
            sized: ([size] ++ op ++ [someBlock])
            ; => size 'op someBlock = 'op .count someBlock
            assert append [equal?] flatten @[sized counted]
        ]
    ]

]


suite "Matematical Properties" [

    someBlock: [A B C D E F]

    test.prop "C[n:n] = 1" [
        assert -> 1 = combine.count someBlock
        assert -> 1 = combine.count.by: (size someBlock) someBlock
    ]
    
    test.prop "C[n:0] = 1" [
        assert -> 1 = combine.count.by: 0 someBlock 
    ]

    test.prop "C[n:k] = 0, for all k > n" [
        assert -> 0 = combine.count.by: (inc size someBlock) someBlock
    ]

    test.prop "C[n:k] = 0, for all k < 0" [
        assert -> 0 = combine.count.by: (neg 1) someBlock
    ]

    test.prop "C[n:k] = n! / (k! * (n - k)!)" [
        sample: [[A B C] [I J K L] [D E F G H] [D E F G H I J]]

        loop [1 2 3] 'k -> loop sample 'Set [
            default: kCombinations size Set k
            repeating: kMulticombination size Set k

            assert -> default = combine.count.by: k Set
            assert -> repeating = combine.count.repeated.by: k Set
        ]
    ]

]


suite "Specific Tests" [

    test "combine.repeated [A B C]" [
        result: [
            [A A A] [A A B] [A A C] [A B B] [A B C] [A C C] 
            [B B B] [B B C] [B C C] 
            [C C C]
        ]

        assert -> result = combine.repeated [A B C]
        assert -> equal? size result combine.count.repeated [A B C]
    ]
    
    test "combine.by: 2 [A B C]" [
        result: [
            [A B] [A C] [B C]
        ]

        assert -> result = combine.by: 2 [A B C]
        assert -> equal? size result combine.count.by: 2 [A B C]
    ]
    
    test "combine.repeated.by: 2 [A B C]" [
        result: [
            [A A] [A B] 
            [A C] [B B] 
            [B C] [C C]
        ]

        assert -> result = combine.repeated.by: 2 [A B C]
        assert -> equal? size result combine.count.repeated.by: 2 [A B C]
    ]

    test "combine.repeated.by: 3 [A B]" [
        result: [[A A A] [A A B] [A B B] [B B B]]

        assert -> result = combine.repeated.by: 3 [A B]
        assert -> equal? size result combine.count.repeated.by: 3 [A B]
    ]

]
