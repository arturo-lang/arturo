inplaceEquivalence: $[value :any func :literal params :block][
    ;; description: « do default and inplaced operations and returns its results
    ;;
    ;; arguments: [
    ;;      value:  « first value to of the parameters
    ;;      func:   « function name
    ;;      params: « rest of the function parameters
    ;; ]
    ;;
    ;; retuns: :block [reference inplaced]
    ;;
    ;; example: {
    ;;      [reference inplaced]: inplaceEquivalence "Art" 'append ["uro"]
    ;;      assert -> reference = inplaced
    ;; }
    @[
        call func append @[value] params
        _inplaceOperation value func params
    ]
] 

inplacePathEquivalence: $[value :any func :literal params :block][
    ;; description: {
    ;;      do default and path-inplaced operations and returns its results
    ;; }
    ;;
    ;; arguments: [
    ;;      value:  « first value to of the parameters
    ;;      func:   « function name
    ;;      params: « rest of the function parameters
    ;; ]
    ;;
    ;; retuns: :block [reference inplaced]
    ;;
    ;; example: {
    ;;      [reference pathInplaced]: inplacePathEquivalence "Art" 'append ["uro"]
    ;;      assert -> reference = pathInplaced
    ;; }
    @[
        call func append @[value] params
        _inplacedPathOperation value func params
    ]
]

fullInplaceEquivalence: $[value :any func :literal params :block][
    ;; description: {
    ;;      do default, inplaced and inplaced-path operations 
    ;;      returning its results
    ;; }
    ;; 
    ;; arguments: [
    ;;      value:  « first value to of the parameters
    ;;      func:   « function name
    ;;      params: « rest of the function parameters
    ;; ]
    ;;
    ;; retuns: :block [reference inplaced inplacedPath]
    ;;
    ;; example: {
    ;;      [reference inplaced pathInplaced]: inplaceEquivalence "Art" 'append ["uro"]
    ;;      assert -> reference = inplaced
    ;;      assert -> reference = pathInplaced
    ;; }
    @[
        call func append @[value] params
        _inplaceOperation value func params
        _inplacedPathOperation value func params
    ]
]

_inplaceOperation: $[value :any func :literal params :block][
    ;; description: « do an inplaced operation
    inplaced: new value
    call func ['inplaced] ++ params
    return inplaced
]

_inplacedPathOperation: $[value :any func :literal params :block][
    ;; description: « do a path-inplaced operation
    inplaced: #[value: new value]
    call func ['inplaced\value] ++ params
    return inplaced\value
]