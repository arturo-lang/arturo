;------------------------------------
; Objects and prototypes
; in Arturo
;------------------------------------

;===========================
; :PERSON
;===========================

define :person [                            
    ; define a new custom type "Person"
    ; with fields: name, surname 
    init: method [name, surname][
        this\name: capitalize name
        this\surname: surname
    ]

    string: method [][
        render "NAME: |this\name|, SURNAME: |this\surname|"
    ]

    sayHello: method [][
        print ["Hello" this\name]
    ]
]

a: to :person ["John" "Doe"]                    ; let's create 2 "Person"s
b: to :person ["jane" "Doe"]                    ; and another one

do [
    a\sayHello                                      ; call inner method
    b\sayHello

    print ["The first person's name is:" a\name]    ; access inner field directly
    print ["The second person's name is:" b\name]

    a\name: "Bob"                                   ; change inner field
    a\sayHello                                      ; and verify persistence

    print type a                                    ; verify object type
    print is? :person a                             ; and again with `is?`

    print a                                         ; inspect final objects' state
    print b
]

;===========================
; :CAR
;===========================

define :car [
    init: constructor [brand, model, year]
    compare: sortable 'year
]

c: to :car #[brand: "Ford" model: "Mustang" year: 1967]
d: to :car #[brand: "Nissan" model: "Sunny" year: 1991]

print c
print d

print ["Car C is a" c\brand]
print ["Car D is a" d\brand]

print c > d
print c < d 
print c = d 
print c <> d
print sort @[c d]
print sort.descending @[c d]