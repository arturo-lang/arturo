; SIMPLE FUNCTION CALL
; WITH RETURN

f: function [][
    print "in f"
    return 10
    print "still in f - ERROR"
]

print "before calling f"
print f
print "after calling f"

print "---"

; FUNCTION CALL
; WITH IF-ELSE AND RETURN

g: function [x][
    print "in g"
    switch x<5 [
        print "x<5"
        return x
        print "after return - ERROR"
    ][
        print "x>=5"
        return 2*x
        print "after return - ERROR"
    ]
    print "still in g - ERROR"
]

loop [1 3 5 7] 'i [
    print "before calling g"
    print ["g" i "=" g i]
    print "after calling g"
]

print "---"

; FUNCTION CALL
; WITH NESTED IF-ELSE 
; AND RETURN

h: function [z][
    print "in h"
    switch z<5 [
        print "z<5"
        return z
        print "after return - ERROR"
    ][
        if z=5 [
            print "z=5"
            return 3*z
            print "after return - ERROR"
        ]
        print "z>=5"
        return 2*z
        print "after return - ERROR"
    ]
    print "still in h - ERROR"
]

loop [1 3 5 7] 'j [
    print "before calling h"
    print ["h" j "=" h j]
    print "after calling h"
]

; SIMPLE BREAK 
; FROM LOOP

print "break: before loop"
loop 1..5 'x [
    print ["break: x:" x]
    if x=3 -> break
    print "break: after test"
]
print "break: after loop"

; SIMPLE CONTINUE
; IN LOOP

print "continue: before loop"
loop 1..5 'x [
    print ["continue: x:" x]
    if x=3 -> continue
    print "continue: after test"
]
print "continue: after loop"

; NESTED BREAK 
; FROM LOOP

print "nested break: before loop 1"
loop 1..3 'x [
    print ["nested break: x:" x]
    print "nested break: before loop 2"
    loop 0..3 'y [
        print ["nested break: y:" y]
        if y=1 -> break
        print "nested break: after test"
    ]
    print "nested break: after loop 2"
]
print "nested break: after loop 1"