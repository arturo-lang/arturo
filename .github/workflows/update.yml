name: Build & Documentation

on:
    pull_request_target:
        types:
            - closed
        branches:
            - master
      
concurrency: 
    group: ${{ github.workflow }}-${{ github.ref }}
    cancel-in-progress: true

jobs:
    # Step 1: Auto-increment build number
    increment-build:
        if: github.event.pull_request.merged == true
        runs-on: ubuntu-latest
        permissions:
            contents: write
        outputs:
            version_tag: ${{ steps.version-info.outputs.VERSION_TAG }}
            
        steps:
            - name: Checkout code
              uses: actions/checkout@v3
              with:
                ref: master
                fetch-depth: 0
                token: ${{ secrets.PAT_TOKEN }}
      
            - name: Configure Git
              run: |
                git config user.name "GitHub Actions Bot"
                git config user.email "actions@github.com"
      
            - name: Increment build number and get version info
              id: version-info
              run: |
                # Read current build number
                current_build=$(cat version/build)
                
                # Increment it
                new_build=$((current_build + 1))
                
                # Update file
                echo $new_build > version/build
                
                # Read version (assuming you have a version file)
                if [ -f "version/version" ]; then
                    version=$(cat version/version)
                else
                    # Fallback to git tag or default
                    version=$(git describe --tags --abbrev=0 2>/dev/null || echo "0.9.83")
                fi
                
                # Create version tag
                version_tag="master-${version}-${new_build}"
                echo "VERSION_TAG=${version_tag}" >> "$GITHUB_OUTPUT"
                
                echo "New build number: $new_build"
                echo "Version tag: $version_tag"
                
                # Commit and push
                git add version/build
                git commit -m "Update build to ${new_build}"
                git push origin master

    # Step 2: Build all binaries with new version
    build-binaries:
        runs-on: ${{ matrix.os }}
        needs: increment-build
        strategy:
            matrix:
                include: 
                    - {name: "Linux (amd64 / full / webkit-4.1)",   os: ubuntu-latest,   arch: amd64, mode: full, shell: bash}
                    - {name: "Linux (amd64 / full)",                os: ubuntu-22.04,    arch: amd64, mode: full, shell: bash}
                    - {name: "Linux (amd64 / safe)",                os: ubuntu-22.04,    arch: amd64, mode: safe, shell: bash}
                    - {name: "Linux (amd64 / mini)",                os: ubuntu-22.04,    arch: amd64, mode: mini, shell: bash}
                    - {name: "Linux (arm64 / mini)",                os: ubuntu-22.04,    arch: arm64, mode: mini, shell: bash}
                    - {name: "JS (web / mini)",                     os: ubuntu-latest,   arch: amd64, mode: web,  shell: bash}
                    - {name: "Windows (amd64 / full)",              os: windows-latest,  arch: amd64, mode: full, shell: "msys2 {0}"}
                    - {name: "Windows (amd64 / mini)",              os: windows-latest,  arch: amd64, mode: mini, shell: "msys2 {0}"}
                    - {name: "macOS (amd64 / full)",                os: macOS-13,        arch: amd64, mode: full, shell: bash}
                    - {name: "macOS (amd64 / mini)",                os: macOS-13,        arch: amd64, mode: mini, shell: bash}
                    - {name: "macOS (arm64 / full)",                os: macos-latest,    arch: arm64, mode: full, shell: bash}
                    - {name: "macOS (arm64 / mini)",                os: macos-latest,    arch: arm64, mode: mini, shell: bash}

        name: Build ${{ matrix.name }}
        defaults:
            run:
                shell: ${{ matrix.shell }}
        steps:
            - name: Install Arturo
              uses: arturo-lang/arturo-action@main
              with: 
                token: ${{ secrets.GITHUB_TOKEN }}
                mode: ${{ matrix.mode }}
                arch: ${{ matrix.arch }}
                src: ${{ github.ref }}
                metadata: ${{ needs.increment-build.outputs.version_tag }}

            - name: Prepare artifact
              id: artifact-details
              run: |
                binary_path="arturo/bin/arturo"

                artifact_os="macos"
                artifact_os_extra=""
                artifact_arch="${{matrix.arch}}"
                artifact_mode="${{matrix.mode}}"

                if [ "${{runner.os}}" = "Windows" ]; then
                    artifact_os="windows"
                    binary_path="${binary_path}.exe"
                fi
                if [ "${{runner.os}}" = "Linux" ]; then
                    artifact_os="linux"
                    if [ "${{matrix.mode}}" = "web" ]; then
                        artifact_os="js"
                        artifact_arch="web"
                        artifact_mode="mini"
                        binary_path="${binary_path}.js"
                    fi
                    if [ "${{matrix.name}}" = "Linux (amd64 / full / webkit-4.1)" ]; then
                        artifact_os_extra=".webkit41"
                    fi
                fi

                # Use the version tag from the increment-build job
                version_tag="${{ needs.increment-build.outputs.version_tag }}"
                artifact_name="arturo-${version_tag}-${artifact_arch}-${artifact_os}${artifact_os_extra}-${artifact_mode}"

                echo "BINARY_PATH=$binary_path" >> "$GITHUB_OUTPUT"
                echo "ARTIFACT_NAME=$artifact_name" >> "$GITHUB_OUTPUT"

            - name: Upload binary artifact
              uses: 'actions/upload-artifact@v4'
              with:
                name: ${{ steps.artifact-details.outputs.ARTIFACT_NAME }}
                path: ${{ steps.artifact-details.outputs.BINARY_PATH }}

    # Step 3: Generate documentation and combine with binaries
    docgen:
        runs-on: ubuntu-latest
        name: Generate Documentation & Deploy
        needs: [increment-build, build-binaries]  # Wait for both previous jobs
        defaults:
            run:
                shell: bash
        steps:
            - name: Install Arturo
              uses: arturo-lang/arturo-action@main
              with: 
                token: ${{ secrets.GITHUB_TOKEN }}
                mode: docgen
                arch: amd64
                src: ${{ github.ref }}
                metadata: ${{ needs.increment-build.outputs.version_tag }}

            - name: "Install Node"
              uses: actions/setup-node@v4
              with:
                node-version: latest

            - name: "Install build dependencies"
              run: |
                sudo apt-get update
                sudo apt-get install -y build-essential libcmocka-dev

            - name: "Install Ruby"
              uses: ruby/setup-ruby@v1
              with:
                ruby-version: 3.3
                bundler-cache: true
        
            - name: "Install gems"
              run: |
                gem install commonmarker -v "2.1.0" --platform=ruby

            - name: "Install prerequisites"
              run: |
                sudo apt-get update
                sudo apt-get install webp 
                sudo npm install -g sass uglify-js

            # Download all binary artifacts
            - name: Download all binary artifacts
              uses: actions/download-artifact@v4
              with:
                path: binaries/

            # First: Download all binary artifacts and prepare _index.art data
            - name: Prepare website data from binaries
              run: |
                # Initialize variables for _index.art
                declare -A binary_paths
                declare -A binary_sizes
                
                # Process all binary artifacts to create mappings
                for binary_dir in binaries/*/; do
                  if [ -d "$binary_dir" ]; then
                    binary_name=$(basename "$binary_dir")
                    echo "Processing binary for data: $binary_name"
                    
                    # Find the binary file (could be .exe, .js, or no extension)
                    binary_file=$(find "$binary_dir" -type f \( -name "arturo" -o -name "arturo.exe" -o -name "arturo.js" \) | head -1)
                    
                    if [ -n "$binary_file" ]; then
                      # Get file size in human readable format
                      file_size=$(ls -lh "$binary_file" | awk '{print $5}')
                      
                      # Store binary path and size for _index.art mapping
                      binary_paths["$binary_name"]="binaries/$binary_name"
                      binary_sizes["$binary_name"]="$file_size"
                      echo "Mapped: $binary_name -> binaries/$binary_name ($file_size)"
                    else
                      echo "Warning: No binary found in $binary_dir"
                    fi
                  fi
                done
                
                # Generate _index.art with binary paths and sizes
                cat > arturo/docs/website/pages/_index.art << 'EOF'
                ;
                ;  Arturo Website Data       
                ;  Auto-generated by CI      
                ;
                
                ;================================
                ; Binary Download Paths & Sizes
                ;================================
                
                EOF
                
                # Add binary mappings to _index.art
                for binary_name in "${!binary_paths[@]}"; do
                  # Extract components from binary name for mapping
                  # Format: arturo-master-VERSION-ARCH-OS-MODE
                  if [[ "$binary_name" =~ arturo-.*-([^-]+)-([^-]+)-([^-]+)$ ]]; then
                    arch="${BASH_REMATCH[1]}"
                    os="${BASH_REMATCH[2]}"
                    mode="${BASH_REMATCH[3]}"
                    
                    # Handle special cases
                    if [[ "$os" == "js" ]]; then
                      os="web"
                      arch="js"
                    fi
                    if [[ "$binary_name" == *"webkit41"* ]]; then
                      os="linux.webkit41"
                    fi
                    
                    # Create variable name (e.g., linuxFullAmd64, macosMinoArm64)
                    var_name="${os}${mode^}${arch^}"
                    # Clean up variable name
                    var_name=$(echo "$var_name" | sed 's/\.webkit41/Webkit41/g' | sed 's/[^a-zA-Z0-9]//g')
                    
                    # Add both path and size
                    echo "${var_name}: \"${binary_paths[$binary_name]}\"" >> arturo/docs/website/pages/_index.art
                    echo "${var_name}Size: \"${binary_sizes[$binary_name]}\"" >> arturo/docs/website/pages/_index.art
                    echo "Variable created: $var_name = ${binary_paths[$binary_name]} (${binary_sizes[$binary_name]})"
                  fi
                done
                
                echo "" >> arturo/docs/website/pages/_index.art
                echo "version: \"${{ needs.increment-build.outputs.version_tag }}\"" >> arturo/docs/website/pages/_index.art
                echo "buildDate: \"$(date -u)\"" >> arturo/docs/website/pages/_index.art
                
                # Show the generated _index.art file
                echo "Generated _index.art file:"
                cat arturo/docs/website/pages/_index.art

            - name: "Generate website"
              run: |
                ls -la arturo
                cd arturo 
                arturo tools/sitegen.art
                echo "#[release?: false]" > docs/website/data/setup.art
                mkdir tmpdocs
                cd docs/website
                arturo ../../tools/miniwebize/webize.art --build --at: ../../tmpdocs
                cd ../..
                arturo tools/genaiguide.art
                mv tools/aiguide.md tmpdocs/llms.txt

            # Copy binaries to website output directory
            - name: Copy binaries to website
              run: |
            # Copy binaries to website output directory
            - name: Copy binaries to website
              run: |
                # Create binaries directory in the website output
                mkdir -p arturo/tmpdocs/binaries
                
                # Copy all binaries and create checksums
                echo "# Arturo Binaries - ${{ needs.increment-build.outputs.version_tag }}" > arturo/tmpdocs/binaries/checksums.txt
                echo "# Generated on $(date -u)" >> arturo/tmpdocs/binaries/checksums.txt
                echo "" >> arturo/tmpdocs/binaries/checksums.txt
                
                for binary_dir in binaries/*/; do
                  if [ -d "$binary_dir" ]; then
                    binary_name=$(basename "$binary_dir")
                    echo "Copying binary: $binary_name"
                    
                    # Find the binary file (could be .exe, .js, or no extension)
                    binary_file=$(find "$binary_dir" -type f \( -name "arturo" -o -name "arturo.exe" -o -name "arturo.js" \) | head -1)
                    
                    if [ -n "$binary_file" ]; then
                      # Copy binary with proper name
                      cp "$binary_file" "arturo/tmpdocs/binaries/$binary_name"
                      
                      # Generate SHA256 checksum and file size
                      cd arturo/tmpdocs/binaries
                      file_size=$(ls -lh "$binary_name" | awk '{print $5}')
                      sha256_hash=$(sha256sum "$binary_name" | awk '{print $1}')
                      echo "$sha256_hash  $binary_name  ($file_size)" >> checksums.txt
                      cd ../../..
                      
                      echo "Added binary: $binary_name ($file_size)"
                    else
                      echo "Warning: No binary found in $binary_dir"
                    fi
                  fi
                done
                
                # Create a version info file
                echo "${{ needs.increment-build.outputs.version_tag }}" > arturo/tmpdocs/binaries/VERSION
                
                # List all binaries for verification
                echo "Final binaries list:"
                ls -la arturo/tmpdocs/binaries/
                
                # Show checksums
                echo "Checksums file:"
                cat arturo/tmpdocs/binaries/checksums.txt

            - name: Synchronize to website
              uses: burnett01/rsync-deployments@7.0.2
              with:
                switches: -avzr --delete
                path: arturo/tmpdocs/
                remote_path: /var/www/arturo-lang.io/master
                remote_host: arturo-lang.io
                remote_user: root
                remote_key: ${{ secrets.ARTUROLANG }}

            - name: Upload complete website artifact
              uses: 'actions/upload-artifact@v4'
              with:
                name: website-with-binaries-${{ needs.increment-build.outputs.version_tag }}
                path: arturo/tmpdocs

            - name: Display completion summary
              run: |
                echo "🎉 Build & Documentation Complete!"
                echo "Version: ${{ needs.increment-build.outputs.version_tag }}"
                echo "Binaries built: $(ls binaries/ | wc -l)"
                echo "Website deployed to: https://arturo-lang.io/master"
                echo "Binaries available at: https://arturo-lang.io/master/binaries/"